<select id="toc"></select>
<div id="title">{{title}}</div>
<div id="viewer" class="spreads"></div>
<a id="prev" href="#prev" class="arrow">‹</a>
<a id="next" href="#next" class="arrow">›</a>

<script src="/js/jszip.min.js"></script>
<script src="/js/epub.js"></script>

<script>
  let innerWidth = window.innerWidth;
  let innerHeight = window.innerHeight;
  let book = ePub("/book/{{uuid}}/book.epub");
  let replaceState = false;
  const viewer = document.getElementById('viewer');
  viewer.style.height = viewHeight() + 'px';
  let rendition = book.renderTo("viewer", {
    method: 'default',
    width: viewWidth(),
    height: viewHeight()
  });

  const cfi = decodeURIComponent(location.hash.substr(1));
  if (cfi) {
    rendition.display(cfi);
  } else {
    rendition.display();
  }

  book.ready.then(() => {
    window.addEventListener('popstate', (event) => {
      const cfi = decodeURIComponent(location.hash.substr(1));
      if (cfi) {
        rendition.display(cfi);
      } else {
        rendition.display();
      }
    });

    window.addEventListener('hashchange', (event) => {
      console.log('hashchange');
      console.log('href: ' + window.location.href);
    });

    const next = document.getElementById('next');
    next.addEventListener('click', e => {
      book.package.metadata.direction === 'rtl' ?
        rendition.prev() : rendition.next();
      e.preventDefault();
    }, false);

    const prev = document.getElementById('prev');
    prev.addEventListener('click', e => {
      book.package.metadata.direction === 'rtl' ?
        rendition.next() : rendition.prev();
      e.preventDefault();
    }, false);

    let keyListener = function(e) {
      // Left key
      if ((e.keyCode || e.which) == 37) {
        book.package.metadata.direction === 'rtl' ?
          rendition.next() : rendition.prev();
      }

      // Right key
      if ((e.keyCode || e.which) == 39) {
        book.package.metadata.direction === 'rtl' ?
          rendition.prev() : rendition.next();
      }

      // Up key - previous chapter
      if ((e.keyCode || e.which) == 38) {
        const $select = document.getElementById('toc');
        const index = $select.selectedIndex;
        if (index > 0) {
          const url = $select.options[index - 1].getAttribute('ref');
          rendition.display(url);
        }
      }

      // Down key - next chapter
      if ((e.keyCode || e.which) == 40) {
        const $select = document.getElementById('toc');
        const index = $select.selectedIndex;
        if (index < $select.options.length - 1) {
          const url = $select.options[index + 1].getAttribute('ref');
          rendition.display(url);
        }
      }
    };

    rendition.on('keydown', keyListener);
    document.addEventListener('keydown', keyListener, false);
  });

  const title = document.getElementById('title');
  const bookTitle = title.innerText;

  rendition.on('rendered', function(section) {
    // updateToc(section.href);
  });

  rendition.on('relocated', function(location) {
    updateToc(location);

    // When location changes, it will sometimes be good to generate
    // history, allowing Back to return. For example, when a link is
    // followed to a glossary item, it would be nice to be able to go back
    // to where the link was clicked.
    // If the page is reloaded, the current location should be loaded, not
    // some historic location.
    // Therefore: either pushState to add history or replaceState to update
    // location without generating history. Either way, the current href is
    // updated so that a reload loads the current location.
    const newLocation = 
      window.location.href.replace(window.location.hash,'') +
      '#' + location.start.cfi;
    // window.history.replaceState(null, '', newLocation);
    if (newLocation !== window.location.href) {
      window.history.pushState(null, '', newLocation);
    }

    const next = book.package.metadata.direction === 'rtl' ?
      document.getElementById('prev') : document.getElementById('next');

    const prev = book.package.metadata.direction === 'rtl' ?
      document.getElementById('next') : document.getElementById('prev');

    if (location.atEnd) {
      next.style.visibility = 'hidden';
    } else {
      next.style.visibility = 'visible';
    }

    if (location.atStart) {
      prev.style.visibility = 'hidden';
    } else {
      prev.style.visibility = 'visible';
    }
  });

  rendition.on('layout', layout => {
    const viewer = document.getElementById('viewer');

    if (layout.spread) {
      viewer.classList.remove('single');
    } else {
      viewer.classList.add('single');
    }
  });

  window.addEventListener('unload', function () {
    this.book.destroy();
  });

  book.loaded.navigation.then(function (toc) {
    const $select = document.getElementById('toc'),
      docfrag = document.createDocumentFragment();
    // See: https://github.com/futurepress/epub.js/issues/1084
    // Paths in the toc are relative to the path of the toc document, which
    // may be a nav document or an ncx document. But the paths in the spine
    // are relative to the opf document. To translate, it is necessary to
    // translate the path from the toc to an absolute path then translate
    // this to a path relative to the opf document.

    // Return an absolute path, given a path and a base path
    const resolvePath = (path, base) => {
      if (path.indexOf('/') === 0) return path;
      base = base.substring(0,base.lastIndexOf('/'));
      const thisPath = path.split('/');
      const basePath = base.split('/');
      const tl = thisPath.length;
      const bl = basePath.length;

      let i = 0;

      while (
        i < tl &&
        i < bl &&
        thisPath[i] === '..'
      ) {
        i++;
      }

      if (thisPath[i] === '..') {
        throw new Error('Invalid path: ' + path);
      }

      let abs = '';

      if (i < bl) {
        for(let n = 0; n < bl - i; n++) {
          abs += basePath[n] + '/';
        }
      }

      if (i < tl) {
        for(let n = i; n < tl-1; n++) {
          abs += thisPath[n] + '/';
        }
        abs += thisPath[tl-1];
      }

      return abs;
    };

    // Return a relative path given an absolute path and a base path
    const getRelativeURL = (path, base) => {
      base = base.substring(0,base.lastIndexOf('/'));
      const thisPath = path.split('/');
      const basePath = base.split('/');
      const tl = thisPath.length;
      const bl = basePath.length;

      let rel = '';

      let i = 0;
      while (
        i < tl &&
        i < bl &&
        thisPath[i] === basePath[i]
      ) {
        i++;
      }

      if (i < bl) {
        for(let n = i; n < bl; n++) {
          rel += '../';
        }
      }

      if (i < tl) {
        for(let n = i; n < tl-1; n++) {
          rel += thisPath[n] + '/';
        }
        rel += thisPath[tl-1];
      }

      return rel;
    }
    const opfPath = book.path.path;
    const tocPath = resolvePath(
      book.packaging.navPath || book.packaging.ncxPath,
      opfPath
    );
    toc.forEach(function(chapter) {
      const option = document.createElement('option');
      option.textContent = chapter.label;
      option.setAttribute(
        'ref',
        getRelativeURL(resolvePath(chapter.href, tocPath), opfPath)
      );
      docfrag.appendChild(option);
      if (chapter.subitems && chapter.subitems.length) {
        chapter.subitems.forEach(function(subChapter) {
          const option = document.createElement('option');
          option.innerHTML = '&nbsp;' + subChapter.label;
          option.setAttribute(
            'ref',
            getRelativeURL(resolvePath(subChapter.href, tocPath), opfPath)
          );
          docfrag.appendChild(option);
        });
      }
    });

    $select.appendChild(docfrag);

    $select.onchange = function() {
      const index = $select.selectedIndex,
        url = $select.options[index].getAttribute('ref');
      rendition.display(url);
      document.body.focus();
      return false;
    };
  });

  function updateToc (location) {
    const href = location.start.href;
    const $select = document.getElementById('toc');
    const $options = $select.querySelectorAll('option');
    $select.selectedIndex = -1;
    let chapter;
    const EpubCFI = new ePub.CFI();
    for (let i = 0; i < $options.length; ++i) {
      if ($options[i].getAttribute('ref').startsWith(href)) {
        let cfi = $options[i].getAttribute('cfi');
        if (!cfi) {
          const chapterHref = $options[i].getAttribute('ref');
          const section = book.spine.get(chapterHref);
          const id = chapterHref.split('#')[1];
          const el = (id ? section.document.getElementById(id) :
          section.document.body);
          cfi = section.cfiFromElement(el);
          $options[i].setAttribute('cfi', cfi);
        }
        if (
          EpubCFI.compare(location.start.cfi, cfi) > 0 ||
          EpubCFI.compare(location.end.cfi, cfi) > 0
        ) {
          chapter = i;
        }
      }
    }
    if (chapter !== undefined) {
      $options[chapter].selected = true;
      const chapterTitle = $options[chapter].text;
      const title = document.getElementById('title');
      title.innerHTML = bookTitle + ' - ' + chapterTitle +
        ' p ' + location.start.displayed.page +
        ' of ' + location.start.displayed.total;
      document.title = bookTitle + ' - ' +
        chapterTitle + ' p' + location.start.displayed.page;
    } else {
      console.log('no chapter for: ', location);
      const title = document.getElementById('title');
      title.innerHTML = bookTitle + ' - ' + location.start.href +
        ' p ' + location.start.displayed.page +
        ' of ' + location.start.displayed.total;
      document.title = bookTitle + ' - ' +
        location.start.href + ' p' + location.start.displayed.page;
    }
  }

  let resizeTimer;
  addEventListener('resize', (e) => {
    if (resizeTimer) clearTimeout(resizeTimer);
    resizeTimer = setTimeout(() => {
      resizeTimer = undefined;
      handleResize(e);
    }, 500);
  });

  function handleResize (e) {
    const cfi = window.location.hash.substr(1);
    if (
      window.innerWidth !== innerWidth ||
      window.innerHeight > innerHeight ||
      window.innerHeight < innerHeight - 45 // Allowance for search bar
    ) {
      innerWidth = window.innerWidth;
      innerHeight = window.innerHeight;
      viewerHeight = innerHeight - 70;
      rendition.resize(
        viewWidth(),
        viewHeight(),
        cfi
      );
      viewer.style.height = viewHeight() + 'px';
    }
  }

  function viewHeight () {
    return innerHeight - 70;
  }

  function viewWidth () {
    return innerWidth;
  }
</script>

